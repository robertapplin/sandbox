version: '3'

services:
  traefik:
    restart: unless-stopped
    image: traefik:latest
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - web
  web:
    build: ./my_site
    command: python manage.py runserver 0.0.0.0:8000
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`web.local`)"
      - "traefik.http.services.web.loadbalancer.server.port=80"
    expose:
      - 8000
    environment:
      DB_HOST: db
      DB_NAME: mydb
      DB_USER: postgres
      DB_PASSWORD: mypassword
    depends_on:
      - worker
  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_DB: mydb
      POSTGRES_PASSWORD: mypassword
    healthcheck:
      test: pg_isready -U postgres
      interval: 5s
      timeout: 5s
      retries: 5
  worker:
    restart: unless-stopped
    build: ./my_site
    command: celery -A basic_app worker --loglevel=INFO --concurrency 1
    environment:
      DB_HOST: db
      DB_NAME: mydb
      DB_USER: postgres
      DB_PASSWORD: mypassword
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
  redis:
    restart: unless-stopped
    image: redis
    healthcheck:
      test: redis-cli ping
      interval: 5s
      timeout: 5s
      retries: 5

